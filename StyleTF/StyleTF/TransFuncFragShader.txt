#version 330

layout(location = 0) out vec4 FragColor;

in vec3 facePos;

uniform sampler3D volume;
uniform sampler1D transferFunc;
uniform vec3 camPos;

uniform int maxRaySteps;
uniform float rayStepSize;
uniform float gradientStepSize;

uniform vec3 lightPosition;

uniform mat3 G[9] = mat3[](
	1.0/(2.0*sqrt(2.0)) * mat3( 1.0, sqrt(2.0), 1.0, 0.0, 0.0, 0.0, -1.0, -sqrt(2.0), -1.0 ),
	1.0/(2.0*sqrt(2.0)) * mat3( 1.0, 0.0, -1.0, sqrt(2.0), 0.0, -sqrt(2.0), 1.0, 0.0, -1.0 ),
	1.0/(2.0*sqrt(2.0)) * mat3( 0.0, -1.0, sqrt(2.0), 1.0, 0.0, -1.0, -sqrt(2.0), 1.0, 0.0 ),
	1.0/(2.0*sqrt(2.0)) * mat3( sqrt(2.0), -1.0, 0.0, -1.0, 0.0, 1.0, 0.0, 1.0, -sqrt(2.0) ),
	1.0/2.0 * mat3( 0.0, 1.0, 0.0, -1.0, 0.0, -1.0, 0.0, 1.0, 0.0 ),
	1.0/2.0 * mat3( -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, -1.0 ),
	1.0/6.0 * mat3( 1.0, -2.0, 1.0, -2.0, 4.0, -2.0, 1.0, -2.0, 1.0 ),
	1.0/6.0 * mat3( -2.0, 1.0, -2.0, 1.0, 4.0, 1.0, -2.0, 1.0, -2.0 ),
	1.0/3.0 * mat3( 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 )
);

vec3 CalculateNormal(vec3 texCoord)
{
	vec3 sample1, sample2;

	sample1.x = texture(volume, texCoord - vec3(gradientStepSize, 0.0f, 0.0f)).x;
	sample2.x = texture(volume, texCoord + vec3(gradientStepSize, 0.0f, 0.0f)).x;
	sample1.y = texture(volume, texCoord - vec3(0.0f, gradientStepSize, 0.0f)).x;
	sample2.y = texture(volume, texCoord + vec3(0.0f, gradientStepSize, 0.0f)).x;
	sample1.z = texture(volume, texCoord - vec3(0.0f, 0.0f, gradientStepSize)).x;
	sample2.z = texture(volume, texCoord + vec3(0.0f, 0.0f, gradientStepSize)).x;

	return normalize(sample2 - sample1);
}


vec4 CalculateLighting(vec4 color, vec3 N)
{
	vec3 lightDirection = normalize(facePos - lightPosition);
	vec4 diffuseLight = vec4(0.8f, 0.8f, 0.8f, 1.0f);
	vec4 specularLight = vec4(1.0f, 1.0f, 1.0f, 1.0f);

	vec3 L, H;

	L = normalize(lightDirection);
	H = normalize(L + normalize(-facePos));
	
	float diff = clamp(dot(N,L), 0.0f, 1.0f);
	float amb = 0.4f;
	vec4 spec = specularLight * pow (max(0.0f, dot(H, N)), 50.0f); 
	//vec4 spec = specularLight * exp(- pow( acos(max(0.0f, dot(H, N))), 2.0f) / 0.5f); 

	return ((color * diff) + spec + (color * amb));
	//return ((color * diff) + (color * amb));
}

float Sobel(vec3 texCoord)
{
	mat3 G[2] = mat3[](
	mat3( 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, -1.0, -2.0, -1.0 ),
	mat3( 1.0, 0.0, -1.0, 2.0, 0.0, -2.0, 1.0, 0.0, -1.0 )
	);

	mat3 I;
	vec3 sample;
	float cnv[2];

	for (int i=0; i<3; i++)
		for (int j=0; j<3; j++) {
			sample = texture(volume, texCoord + gradientStepSize * vec3(i-1, j-1, 0)).xyz;
			I[i][j] = length(sample); 
	}
	
	for (int i=0; i<2; i++) {
		float dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);
		cnv[i] = dp3 * dp3; 
	}

	return(0.5 * sqrt(cnv[0]*cnv[0]+cnv[1]*cnv[1]));
}

float edgeDetection(vec3 texCoord) 
{
	vec3 sample;
	int index;
	mat3 I;
	float cnv[9];

	// fetch 3x3 neighbourhood and greyscale as intensity value
	for (int i=0; i<3; i++)
		for (int j=0; j<3; j++) {
			sample = texture(volume, texCoord + gradientStepSize * vec3(i-1, j-1, 0)).xyz;
			I[i][j] = length(sample); 
	}

	// calculate the convolution
	for (int i=0; i<9; i++) {
		float dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);
		cnv[i] = dp3 * dp3; 
	}

	float M = cnv[0] + cnv[1] + cnv[2] + cnv[3];
	float S = M + cnv[4] + cnv[5] + cnv[6] + cnv[7] + cnv[8];

	return sqrt(M / S);
}

float silhouette(vec3 texCoord, vec3 view) 
{
	vec3 sample1, sample2;
	sample1.x = texture(volume, texCoord - vec3(gradientStepSize, 0.0f, 0.0f)).x;
	sample2.x = texture(volume, texCoord + vec3(gradientStepSize, 0.0f, 0.0f)).x;
	sample1.y = texture(volume, texCoord - vec3(0.0f, gradientStepSize, 0.0f)).x;
	sample2.y = texture(volume, texCoord + vec3(0.0f, gradientStepSize, 0.0f)).x;
	sample1.z = texture(volume, texCoord - vec3(0.0f, 0.0f, gradientStepSize)).x;
	sample2.z = texture(volume, texCoord + vec3(0.0f, 0.0f, gradientStepSize)).x;

	vec3 n = normalize(sample2 - sample1);
	float grad = length(sample2 - sample1) / gradientStepSize / 2.;

	float s1 = pow( (1. - abs(dot(n, view))), 3.); // silhouette
	float s2;
	float a = 0.5;
	float b = 10;
	if (grad < a) s2 = 0;
	else if (grad > b) s2 = 1;
	else s2 = (grad-a)/b;

	return s1*s2;
}

void main()
{
	vec4 finalColor = vec4(0.0f, 0.0f, 0.0f, 0.0f);
	vec3 position = facePos;
	vec3 texCoord;
	vec4 color;
	vec3 normal;

	vec3 direction = position - camPos;
	direction = normalize(direction);

	float absorption = 0.0f;
	float opacity;
	
	for(int i=0; i<maxRaySteps; i++)
	{
	
		//if (position != facePos && abs(position.x - 0.4f) < 0.01f) {
		//	finalColor = color;
		//	break;
		//}

		color = vec4(0.0f, 0.0f, 0.0f, 0.0f);
		
		texCoord = (position + 1.0f) / 2.0f; 

		float index = texture(volume, texCoord).x;
		
		color = vec4(texture(transferFunc, index)); // lookup the transfer function
		opacity = color.w;

		normal = CalculateNormal(texCoord);
		color = CalculateLighting(color, normal);
			

		if ((absorption + opacity) > 1.0f)
			finalColor += color*(1.0f - absorption);
		else
			finalColor += color*opacity;

		absorption += opacity;

		position = position + (direction * rayStepSize);



		if (abs(position.x) > 1.0f || abs(position.y) > 1.0f || abs(position.z) > 1.0f || absorption >= 0.95f)
		{
		// show a proxy cube
		//	if (absorption < 1.0f)
		//		finalColor += vec4(0.7f, 0.7f, 0.7f, 1.0f) * (1.0f - absorption);

			break;
		}
	}

	//FragColor = finalColor;
	//FragColor = vec4(1);

	texCoord = (position + 1.0f) / 2.0f; 
	float edge = edgeDetection(texCoord);
	if(edge > 0.1) {
		//FragColor += vec4(edge);
		//FragColor = vec4(0.5, 0, 1, edge);
	}

	//FragColor = vec4(silhouette(texCoord, direction));

	
}
